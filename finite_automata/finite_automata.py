from queue import Queue
from typing import Dict, List, Set, Tuple

import graphviz


class FiniteAutomata:
    def __init__(self, states=None, alphabet=None, init_state=None, accepting=None, trans=None) -> None:
        self.states = [i for i in range(
            states)] if states is not None else None
        self.alphabet = alphabet
        self.init_state = init_state
        self.accepting = accepting
        self.trans = self._build_trans(trans)

        # TODO: Error handling upon invalid constructor input

    def _build_trans(self, trans):
        trans_dict: Dict[Tuple[int, str], List[int]] = {}
        for p, s, q in trans:
            if (p, s) not in trans_dict.keys():
                trans_dict[(p, s)] = [q]
            else:
                trans_dict[(p, s)].append(q)
        return trans_dict

    def display(self):  # CODE GENERATED BY CopilotCHAT
        # Create a new Graphviz graph
        dot = graphviz.Digraph(engine='sfdp')

        # Add the states to the graph
        if self.states is not None:
            for state in self.states:
                if state == self.init_state:
                    dot.node(str(state), shape="circle", style="bold",
                             label=f"init\n{self.init_state}")
                elif self.accepting is not None and state in self.accepting:
                    dot.node(str(state), shape="circle", peripheries="2")
                else:
                    dot.node(str(state), shape="circle")

        # Add the transitions to the graph
        if self.trans is not None:
            for transition in self.trans.items():
                for dest in transition[1]:
                    if transition[0][1] == '.':
                        dot.edge(str(transition[0][0]), str(
                            dest), label='Îµ')
                    else:
                        dot.edge(str(transition[0][0]), str(
                            dest), label=transition[0][1])

        # Render the graph to a PNG image
        dot.render("figures/automata", format="png", view=False)

    def evaluate(self, x: str, detailed=False):
        x_tokenized = []
        for c in x:
            x_tokenized.append(c)
        x_tokenized.append("EoS")

        traverse_history = Queue()
        traverse_history.put((self.init_state, 0))
        final_states = []
        while traverse_history.qsize() > 0:
            current_state, idx = traverse_history.get()
            print(
                f'\tCurrently proccessing {current_state} -> {x_tokenized[idx]} ...')
            if x_tokenized[idx] == "EoS":
                final_states.append(current_state)
            elif (current_state, x_tokenized[idx]) in self.trans.keys():
                next_states = self.trans[(current_state, x_tokenized[idx])]
                for state in next_states:
                    traverse_history.put((state, idx+1))

        intersect = set(final_states) & set(self.accepting)
        return intersect if detailed else len(intersect) > 0
